This directory contains tool applications that you can use along with your Bob++
applications. These tools handle the log file that should be generated by one or several 
bobpp application.


1. loglistener
==============

loglistener is a tool for online merging of logs from different hosts on the
network. This is specially useful when using a distributed version of Bob++,
such as the Athapascan version.

In order to enable network logging, you have to run your applications with the
-ln command line option. See the online help of any application compiled for
Bob++ (such as those in the examples directory) for more information about
network logging.

usage : ./loglistener [udp-port-number] > file.log


2. logview
==========

logview is a C/GTK+ GUI for displaying logs. It can either display information
in an offline way (ie, read generated log files), or read the log while it is
being generated.

usage: ./logview [switches] LOGFILE

Switches are :
  -t NUMBER : Number of threads (default=0)

LOGFILE can either be :
 * a regular file (offline display)
 * a fifo (online display on single-host UNIX systems)
 * the special value '-' to read from the standard input (useful for linking the
 output of a "tail -f" command, in order to display the output of loglistener
 online.


*NOTE* : to compile logview, you need the Gtk Instrumentation Widgets (GIW)
additional library. It can be downloaded from http://giw.sourceforge.net/

3. bobloggui
=============

The goal of the bobloggui application is to handle and visualize the Bobpp log file
generate by the a bobpp application. The bobpp log file is usually generated with the 
-lf option. In the examples directory, the QAP application could generate the log file
solving the nugent 12 using the following command :
  ./qap -lf --qap -f Text/n12.dat

The bobloggui tool is a future replacement of the logview application
and has replaced the bobtree application. 

The tree generation -d option
-----------------------------

With the -d option the bobloggui tool generates a dot file from a log file.
A dot file is readable by the dot program in order to produce Graphical 
view of the space search in different image file format (png ,svg, eps, dia, etc...). 
The dot program is a part of the Graphviz layout programs (http://www.graphviz.org/).
For example if you have run your application to get the bob++ log file : file.log.
You could obtain the file.dot running 
   ./bobloggui -d  file.log
Then you could obtain a png file using
   dot -Tpng file.dot > file.png

The generation of the information used by the bobloggui application is enabled in the 
configure of Bob++ (using the --enable-space option). 
Each Bobpp application generates a log file 
when the -lf command line option is used and add the space information 
in the log file if the -sp option is also added.

Usage : bobloggui [switches] <file>
      
		<file> : the filename to read (default file.log)
Switches are :
		-g       : gtk visualization (not implemented yet).
		-d       : generate dot file
		-l       : with label on nodes (default no label)
		-r value : the rank separation length (default 0.10)
		-n value : the node separation length (default 0.05)
		-h value : height of the node (default 0.10)
		-w value : width of the node (default 0.10)
		-s value : width of the edge (default 0.10)
		-m value : maximum value for the bound (no default)
		-o value : file name to create (default file.log)

*NOTE* : According to the number of generated nodes, the size of the image file
could also be really big.

4. bobplot
==========

bobplot is a tool to generate curves using gnuplot.
bobplot collects the data used for the curves in the collect.txt file.
This file is populated giving the -c option for a Bob++ application. 

