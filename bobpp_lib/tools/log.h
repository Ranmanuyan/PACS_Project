/**
\page Logtools The execution logging tools

Bob++ features tools for gathering, logging and analysing statistics of the
execution of algorithms. Those tools are the log viewer and the log listener.

\note{Support for logging is very limited on Windows
systems. Only log file generation is possible. Both log viewer and listener are
not available.}

\section bobview The log viewer

The log viewer (also called <b>bobview</b>) is a graphical tool which can
display log data resulting from the execution of a Bob++ algorithm.

The data which can be displayed is :
 - counters (insertions, deletions) for the Global Priority Queue.
 - counters for all entries which have been incorporated in the \a Goal and \a
Stat members of the \a Trait class supplied by the user when creating the \ref
Bob::AlgoEnvProg. Default Goals such as \ref Bob::BBGoalBest and Stats such as
Bob::BBStat include several default counters.
 - cumulated time values (default are Genchild calls and Algotithm time)

Counters are displayed on (X,Y) plots. Statistics which have been declared
global (such as for a shared Priority Queue in a distributed memory environment)
are displayed on a <em>Global view</em> plot. Task-specific counters are
displayed on task-specific plots.

For each plot, the X axis represents the time, and the Y coordinates of each
curve represent the evolution of the value of the counters according to the
time.

The cumulated times are displayed on a separate list, which shows the values of
all time stats. If a stat item is task-specific, all its values among the
different tasks are displayed.

\subsection bobview_usage Usage

The data input for <b>bobview</b> can be :
 - a log file generated by the execution of a Bob++ application, of by
 redirecting the standard output of the <b>boblistener</b> tool.
 - a named pipe, where the outputs of all tasks from a shared memory Bob++
 application can be redirected.

Using <b>bobview</b> is as simple as issuing the following command :
\code
$ bobview <logfile>
\endcode

<b>bobview</b> will run and display the log input you provided.

<b>bobview</b> can be run:
 - when the execution of the Bob++ application is over. In this case, the input
 data must be a log file.
 - when the Bob++ application is running. The input may be:
   - a log file: in this case, <b>bobview</b> regularly updates the displayed
   data as the log file is growing.
   - a named pipe: <b>bobview</b> must be run before the Bob++ application.

\section boblistener The log listener

The log listener (also called <b>boblistener</b>) is a tool which listens to log
entries which are sent through the network via UDP datagrams. It is very
convenient when executing distributed algorithms on different nodes in the
network.

In this case, a global log file cannot be generated in a straightforward manner.
sharing a write-only file on a shared NFS filesystem introduces overflows and
requires mutual exclusion mechanisms using shared locks, hence necessary global
performance loss.

The solution is to use the <b>boblistener</b> tool. This program listens for
incoming UDP packets from the network. Each packet contains a log entry, and may
come from any of the running nodes of the parallel environment.
<b>boblistener</b> simply gathers the incoming data and outputs it to its
standard output.

\subsection boblistener_udp Packet losses

The UDP protocol does not guarantee that a datagram always arrives to its
destination. Hence, a certain portion of the log entries are likely to be lost
during the execution of the user application.

Anyway, most of the log data are counter values. A log entry corresponds to the
incrementation of a counter. Thus, if a log entry is lost, the correct counter
value is not actually lost, and the next log entry will contain the real value of
the counter. You can see it as a missing point on a plot. Losing one point out of
hundreds does not make a real difference.

\subsection boblistener_usage boblistener usage


To simply wait for log entries and gather them to a single output file, you can
issue the following command:

\code
$ boblistener > output_file
\endcode

\section logtools_ex Example using boblistener and bobview

The following example shows how to use <b>boblistener</b> to generate a global
log file when running a parallel application on the MPI programming environment.
The example application used is the MIP solver which can be found in the
\p examples/MIP directory of the Bob++ archive.

Suppose you want to gather the log data on a host whose network name is \p zeuhl.

On the \p zeuhl host, run the <b>boblistener</b> with the command:

\code
zeuhl$ boblistener > output_file
\endcode

Now, on the master node of the MPI cluster, run the \p mipmpi program by choosing
network logging and choosing \p zeuhl as the target host;

\code
$ mpirun C ./mipmpi -ln -on zeuhl
\endcode

On the \p zeuhl host, you can now visualize the whole execution of the MIP
application in real time by launching <b>bobview</b> using the \p output_file as
input:

\code
zeuhl$ bobview output_file
\endcode

\section bobtree The botree tool

Bobtree is a tool that reads a Bobpp log file to generate a dot file. A dot file 
is readable by the dot program in order to produce Graphical view of the space search
in different image file format (png ,svg, eps, dia, etc...). 
The dot program is a part of the Graphviz layout programs (http://www.graphviz.org/).
For example if you have run your application to get the bob++ log file : \p file.log.
You could obtain the \p file.dot running 
\code
   ./bobtree file.log
\endcode
Then you could obtain a png file using the <b>dot</b> application.
\code
   dot -Tpng file.dot > file.png
\endcode
The <b>twopi</b> application could also be used to display the space search 
where node are on the circles centered on the root node.
\code
   twopi -Tpng file.dot > file.png
\endcode

The generation of the information used by the <b>bobtree</b> application is enabled in the 
configure of Bob++ (<b>--enable-space</b>). Each Bobpp application generates a log file 
when the <b>-lf</b> command line option is used.

Usage : bobtree [switches] logfile
      
	- 	logfile : the filename to read (default file.log)

Switches are :
 	-	-l       : with label on nodes (default no label)
	-	-r value : the rank separation length (default 0.10)
	-	-n value : the node separation length (default 0.05)
	-	-h value : height of the node (default 0.10)
	-	-w value : width of the node (default 0.10)
	-	-s value : width of the edge (default 0.10)
	-	-m value : maximum value for the bound (no default)
	-	-o value : file name to create (default file.log)

*NOTE* : According to the number of generated nodes, the size of the image file
could be too big to be displayed by the classical image viewer.

*/

